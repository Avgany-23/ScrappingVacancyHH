from datetime import datetime, timedelta
from time import sleep
from typing import Callable, Any
from functools import wraps


def time_decorator(func: Callable) -> Callable[[], Any]:
    """"–§—É–Ω–∫—Ü–∏—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç func - —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é wrapper"""

    @wraps(func)    # –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ func
    def wrapper(*args: Any, **kwargs: Any) -> func:
        """–§—É–Ω–∫—Ü–∏—è –æ–±–µ—Ä—Ç–∫–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ func
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç *args - –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, **kwargs - –∏–º–µ–Ω–Ω–æ–≤–∞–Ω–Ω—ã–µ"""
        print(f'–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏.\n'
              f"üïê–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç–∞: {datetime.now().strftime('%d-%m-%Y %H:%M:%S')}\n")
        start = datetime.now()
        result_func = func(*args, **kwargs)
        end = datetime.now() - start

        # –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Å–æ–≤, –º–∏–Ω—É—Ç –∏ —Å–µ–∫—É–Ω–¥
        hours = end.seconds // 60 // 60
        minutes = end.seconds // 60 - hours * 60
        seconds = end.seconds - hours * 60 ** 2 - minutes * 60

        # –ö–æ—Ä—Ç–µ–∂–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        name_hours = ('—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤')
        name_minutes = ('–º–∏–Ω—É—Ç–∞', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç')
        name_seconds = ('—Å–µ–∫—É–Ω–¥–∞', '—Å–µ–∫—É–Ω–¥—ã', '—Å–µ–∫—É–Ω–¥')

        # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
        print(f'–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–∞–≤–∏–ª–æ: {choose_plural(hours, name_hours)} '
                                         f'{choose_plural(minutes, name_minutes)} –∏ '
                                         f'{choose_plural(seconds, name_seconds)}\n')
        return result_func
    return wrapper


def choose_plural(amount: int, declensions: tuple[str]) -> str:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ –∏ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –µ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è,
    –ù–∞–ø—Ä–∏–º–µ—Ä, 91 ('–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π')
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç amount - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (int), declensions - —Å–ø–∏—Å–æ–∫ —Å–∫–ª–æ–Ω–µ–Ω–∏–π (–∫–æ—Ä—Ç–µ–∂ —Å—Ç—Ä–æ–∫)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é –≤ —Å–µ–±–µ —á–∏—Å–ª–æ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ"""

    selector = {
        amount % 10 == 1: 0,
        amount % 10 in [2, 3, 4]: 1,
        amount % 10 in [0, 5, 6, 7, 8, 9]: 2,
        amount % 100 in range(11, 21) : 2
    }
    return f'{amount} {declensions[selector[True]]}'